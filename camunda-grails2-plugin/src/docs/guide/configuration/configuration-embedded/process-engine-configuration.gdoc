You can fully control your *embedded* Camunda process engine configuration via Config.groovy:

{code}
camunda {
  engine {
    configuration {
      ...
    }
  }
}
{code}

Find a full specification of the values possible in the Camunda docs for the spring [process
engine configuration|http://docs.camunda.org/latest/api-references/javadoc/org/camunda/bpm/engine/spring/SpringProcessEngineConfiguration.html].

Note that in case you do not configure a value the plugin relies on the default values coming
with the Camunda engine in use - with the following two exceptions for the default grails
environments *dev*elopment and *test*:

- your database is populated with Camunda tables the first time the database is accessed
- the job executor is turned on

{note}This choice was made in order to make it as easy as possible to [get
started|guide:get-started] while relying on explicit configuration choices when deploying to
other (and potentially production) databases. Also, note that until version 0.5.0 of the 
plugin, the deploymentResources param was set to scan the classpath for bpmn files. This 
is not necessary anymore, since now the concept of "process applications" is used, which
include automatical resource scanning by default.{note}

That means if you want to have that same behaviour for any other environment, you need to
explicitely configure that in Config.groovy:

{code}
camunda {
  engine {
    configuration {
      databaseSchemaUpdate = true
      jobExecutorActivate = true
    }
  }
}
{code}

Obviously you can also change the configuration for the environments development and test, for
the sake of the example e.g. to the current Camunda defaults used for the grails environment
*prod*uction:

{code}
camunda {
  engine {
    configuration {
      databaseSchemaUpdate = false
      jobExecutorActivate = false
    }
  }
}
{code}

{note} Please be aware that during integration test phase of any environment, two Camunda
configuration values are set by the plugin: the Camunda job executor is turned off and service
mocking is made available. Find more information about that in section
[testing|guide:testing].{note}