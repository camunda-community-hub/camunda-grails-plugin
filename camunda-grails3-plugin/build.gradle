buildscript {
  ext {
    grailsVersion = project.grailsVersion
  }
  repositories {
    mavenLocal()
    maven { url "https://repo.grails.org/grails/core" }
  }
  dependencies {
    classpath "org.grails:grails-gradle-plugin:$grailsVersion"
  }
}

plugins {
  id "io.spring.dependency-management" version "0.5.2.RELEASE"
  id "com.jfrog.bintray" version "1.2"
}

group 'org.grails.plugins'
version '0.6.0-SNAPSHOT'

apply plugin: 'maven-publish'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: "spring-boot"
apply plugin: "org.grails.grails-plugin"
apply plugin: "org.grails.grails-gsp"
apply plugin: "org.grails.grails-doc"
apply plugin: "org.grails.plugins.camunda"
// Used for publishing to central repository, remove if not needed
apply from: 'https://raw.githubusercontent.com/grails/grails-profile-repository/master/profiles/plugin/templates/grailsCentralPublishing.gradle'
apply from: 'https://raw.githubusercontent.com/grails/grails-profile-repository/master/profiles/plugin/templates/bintrayPublishing.gradle'

ext {
  grailsVersion = project.grailsVersion
  gradleWrapperVersion = project.gradleWrapperVersion
}

sourceCompatibility = 1.7
targetCompatibility = 1.7

// TODO Event Scripts in den Gradle Build integrieren
// TODO Cli Tests Ã¼bertragen

repositories {
  mavenLocal()
  mavenCentral()
  maven { url "https://repo.grails.org/grails/core" }
  maven { url "https://app.camunda.com/nexus/content/groups/public" }
}

dependencyManagement {
  imports {
    mavenBom "org.grails:grails-bom:$grailsVersion"
  }
  applyMavenExclusions false
}

def camundaVersion = System.getProperty("camunda-bpm.version") ?: "7.3.0"

dependencies {
  compile("org.camunda.bpm:camunda-engine:$camundaVersion") {
    exclude(group: 'org.springframework', module: 'spring-beans')
  }
  compile("org.camunda.bpm:camunda-engine-spring:$camundaVersion") {
    exclude(group: 'org.springframework', module: 'spring-context')
    exclude(group: 'org.springframework', module: 'spring-jdbc')
    exclude(group: 'org.springframework', module: 'spring-orm')
  }
  provided project(":camunda-grails-core")

  provided 'org.springframework.boot:spring-boot-starter-logging'
  provided "org.springframework.boot:spring-boot-starter-actuator"
  provided "org.springframework.boot:spring-boot-autoconfigure"
  provided "org.springframework.boot:spring-boot-starter-tomcat"

  provided "org.grails:grails-web-boot"
  provided "org.grails:grails-dependencies"
  provided 'javax.servlet:javax.servlet-api:3.1.0'
  provided 'com.h2database:h2:1.3.176'

  testCompile "org.grails:grails-plugin-testing"

  console "org.grails:grails-console"
}

task wrapper(type: Wrapper) {
  gradleVersion = gradleWrapperVersion
}

jar {
  def gradlePlugin = project(":camunda-grails-gradle")
  def grailsCore = project(":camunda-grails-core")
  dependsOn gradlePlugin.classes, grailsCore.classes
  from (gradlePlugin.sourceSets.main.output.classesDir,
    gradlePlugin.sourceSets.main.output.resourcesDir)
  from (grailsCore.sourceSets.main.output.classesDir,
    grailsCore.sourceSets.main.output.resourcesDir)
}

install {
  dependsOn publishToMavenLocal
}

publishing {
  publications {
    maven(MavenPublication) {
      artifactId 'camunda'
    }
  }
}